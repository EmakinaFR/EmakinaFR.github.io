---
layout: post
title: Magento et VueJs un duo insolite.
author: Chlo√© Avoustin
banner: magento/magento-vuejs.jpg
categories: D√©veloppement Magento
excerpt_separator: "<!--more-->"
---

Un projet est le compromis qui permet de r√©pondre √† un besoin dans une contrainte de temps et de budget. C'est la raison
pour laquelle Emakina a choisi de faire reposer nos projets sur des structures robustes et compl√®tes, comme Magento.
L'avantage de ces plateformes est qu'elles permettent de mettre en place des approches classiques ou des PWA. Mais ces
solutions sont-elles toujours la bonne r√©ponse ?

<!--more-->

## Qu'est-ce que le standard Magento ?

<figure>
  <img src="/assets/image/magento/magento.jpg" alt="Magento2" />
</figure>

Lors de nos phases d'estimations, nous essayons d'exploiter au maximum les √©l√©ments fournis par Magento. Nous gardons
toujours en t√™te de faciliter la compatibilit√© avec les nouvelles versions. L'objectif √©tant de pouvoir garantir
l'application des patchs de s√©curit√© et des correctifs, mais √©galement de permettre l'utilisation des derni√®res
fonctionnalit√©s.

Notre objectif est de rapidement avoir une application viable puis d'it√©rer pour la faire √©voluer. C'est pour cette
raison, que lors de l'initialisation d'un projet, nous utilisons syst√©matiquement comme parent de notre th√®me l'un
de ceux propos√© par Magento. L'avantage majeur est qu'il permet aux utilisateurs de b√©n√©ficier d'une exp√©rience compl√®te
que nous pouvons ensuite personnaliser et enrichir.

Les deux √©l√©ments qui permettent au standard Magento d'√™tre si efficace sur la partie front-end sont :
- le syst√®me de layouts en XML qui permet de d√©placer, cr√©er ou retirer un block fonctionnel
- la gestion de styles via des variables LESS qui permet de mettre en place les premi√®res lignes de la charte graphique
  de la marque

Lors de la r√©alisation d'un projet, il est alors possible d'obtenir une exp√©rience unique en quelques sprints.
Cependant, cette m√©thode a aussi une contrainte, nous devons composer avec l'existant et les m√©caniques de Magento.
Ce qui implique que lorsque nous souhaitons refondre totalement le standard, le temps de d√©veloppement peut alors
rapidement s'allonger.

## Qu'en est-il de Magento et des PWA ?

<figure>
  <img src="/assets/image/magento/magento-pwa.jpg" alt="Magento2 et PWA" />
</figure>

Nativement, Magento expose de tr√®s nombreuses fonctionnalit√©s via son API, un fonctionnement dit "headless" est alors
envisageable. En r√©sum√©, il est alors possible de dissocier l‚Äôadministration du site de son rendu. C'est gr√¢ce √† ce
proc√©d√© qu'il est possible de cr√©er des PWA.

L‚Äôavantage majeur des PWA est de faire dispara√Ætre les freins li√©s √† une utilisation "classique". La partie front se
transforme alors en un affichage de templates sp√©cifiques √† dynamiser par de la manipulation d‚Äôobjets. Lors de projets
exp√©rientiels, nous partons d'une page blanche, ce qui permet alors de laisser libre cours √† l‚Äôexp√©rience utilisateur.

En contre-partie, il est n√©cessaire de passer du temps sur l'architecture front, mais √©galement sur l‚Äôint√©gralit√© des
√©l√©ments du site. Le temps de d√©veloppement pour une application compl√®te est en cons√©quence plus long sur la premi√®re
partie de la vie du projet. Autre √©l√©ment √† prendre en compte : l'h√©bergement. En effet, le fait d'avoir un front et un
back-office dissoci√©s impose un environnement avec un certain nombre de sp√©cificit√©s √† prendre en compte.

Pour pallier cela, il existe des solutions comme VueStorefront ou PWA Studio qui viendront tout de m√™me avec
d'autres contraintes.

## Le meilleur des deux mondes...

<figure>
  <img src="/assets/image/magento/vue_banner.jpeg" alt="VueJS" />
</figure>

Lors du projet que nous appellerons Gaia, ce choix s'est impos√© √† nous. Rapidement, notre √©quipe a d√ª se rendre
√† l'√©vidence : aucune de ces deux solutions ne correspondaient au besoin. Nous avions besoin d'√™tre rapides, tout en
cr√©ant une exp√©rience fluide et unique. L'objectif principal de cette application √©tant de mettre un atelier de
personnalisation de tenues au c≈ìur d'un site e-commerce classique.

C'est cette derni√®re particularit√© qui a permis de sortir des options classiques. R√©sign√©s √† ne pas pouvoir choisir,
nous nous sommes lanc√© dans une version hybride : rester sur un d√©veloppement classique, mais y inclure une brique VueJS
li√©e au site via l'API de Magento.

### Les avantages
üëç Un MVP rapide avec un focus sur le configurateur.  
üëç De la fluidit√© et de la libert√© en partant d'une page blanche.  
üëç VueJS en inclusion directe pour un h√©bergement unique.  
üëç L'exploitation de GraphQL et des API existantes.

### Les points de vigilances
üëé Cette m√©thode, est incompatible avec Internet Explorer.  
üëé Les API √©voluent rapidement, les mont√©es de version peuvent √™tre consid√©rablement impact√©es.  
üëâ Ne pas abuser des appels, chaque appel API compte lorsque la charge serveur est importante.

## La r√©alit√© du terrain

Une fois cette id√©e partag√©e avec l'ensemble de l'√©quipe, nous savions quoi faire et il ne restait plus qu'√† valider la
faisabilit√©. Au vu, de la quantit√© de travail devant nous, le d√©coupage en petites t√¢ches "simples" et avancer pas √† pas
a sembl√© √™tre l'option la plus efficace et s√©curis√©e.

### 1. Initialisation de l'application

Une fois notre module et la nouvelle route cr√©√©s, il a suffi d'ajouter un bloc et un template pour initialiser
l'application.

```xml
<!-- app/code/Gaia/Configurator/view/frontend/layout/configurator_index_index.xml -->

<?xml version="1.0"?>
<page layout="1column" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      xsi:noNamespaceSchemaLocation="urn:magento:framework:View/Layout/etc/page_configuration.xsd">
  <body>
    <referenceContainer name="content">
      <block name="configurator" template="Gaia_Configurator::configurator.phtml"/>
    </referenceContainer>
  </body>
</page>
```

```html
<!-- app/code/Gaia/Configurator/view/frontend/templates/configurator.phtml -->

<div id="configurator" data-mage-init='{"initialize": {}}'></div>
```
Les choses s√©rieuses ont ensuite commenc√©. Notre premier sujet de rendre VueJs utilisable dans Magento. La solution la
plus simple et rapide a √©t√© de l'inclure via un CDN. Cette premi√®re √©tape √©tant derri√®re nous, il fallait maintenant
permettre l'interpr√©tation des fichiers `.vue`.

N√©anmoins, la partie JavaScript de Magento est orchestr√©e par requireJS or celui-ci interpr√®te uniquement des fichiers
en `.js`. Apr√®s quelques recherches et tests, c'est l'ajout de `requireVue` est apparue comme une √©vidence.

```js
// app/code/Gaia/Configurator/view/frontend/requirejs-config.js

const config = {
  map: {
    '*': {
      'initialize': 'Gaia_Configurator/js/initialize',
      'Query': 'Gaia_Configurator/js/Query',
      'requireVue': 'https://unpkg.com/requirejs-vue@1.1.5/requirejs-vue',
      'Vue': 'https://unpkg.com/vue@2.5.11/dist/vue.min',
    },
  },
};
```
Une fois tous ces √©l√©ments install√©s, l'application pouvait se lancer via une fonction appel√©e avec
l'attribut `data-mage-init` dans le template `phtml` pr√©c√©dent. En quelques lignes, et beaucoup de recherches, le tour
√©tait jou√©.

```js
// app/code/Gaia/Configurator/view/frontend/web/js/initialize.js

define(['Vue', 'jquery'],
  function (Vue, $) {
    const src = './Gaia_Configurator/template/App';

    return function () {
      require(['requireVue!' + src ], function (file) {
        file.$mount('#configurator');
      });
    }
  }
);
```
La derni√®re √©tape √©tait la plus simple : cr√©er le template VueJS, ici `App.vue` dont le chemin est indiqu√© par la
variable `src` du fichier pr√©c√©dent.
```html
<!-- app/code/Gaia/Configurator/view/frontend/web/template/App.vue -->

<template><div>Hello World !</div></template>

<script>
  define(['jquery','Vue'], function($,Vue) {
    return new Vue({
        template: template,
        components: {},
        data() {
            return {};
        },
        methods: {}
    });
});
</script>
```

### 2. Connexion avec les API

Comme √©voqu√© pr√©c√©demment, Magento met √† disposition des API, dont une partie avec GraphQL. L'option retenue a √©t√© de
les exploiter et de les enrichir. Apr√®s quelques recherches et p√©rip√©ties, c'est
[Apollo Boost Amd](https://github.com/mage2tv/module-apollo-boost-amd) qui a permis de faciliter la communication
en reliant de mani√®re transparente le client de l'application √† GraphQL.

Attention: la particularit√© d'Apollo Bosst Amd est qu'il s'installe via Composer.
```
composer require mage2tv/module-apollo-boost-amd
```

Nous avons ensuite pris un moment pour r√©fl√©chir √† la structure de nos fichiers. Nous voulions :
- une structure √©volutive
- facilement utilisable et r√©utilisable
- quelque chose d'intelligible qui limite la duplication

Une fois ces besoins exprim√©s, la mise en place d'une architecture JavaScript qui s'approche d'un mod√®le MVC est apparue
comme la solution la plus robuste.

<figure>
  <img src="/assets/image/magento/api.jpg" alt="Architecture: R√©cup√©ration de donn√©es via GraphQL" />
  <figcaption>Architecture: R√©cup√©ration de donn√©es via GraphQL</figcaption>
</figure>


Le fichier `graphql.js` est une sorte de mod√®le qui permet de lancer des requ√™tes `get` ou `update`.
```js
// app/code/Gaia/Configurator/view/frontend/web/js/graphql.js

define(['utils', 'apollo-boost'], function(utils, ApolloAmd) {
    const {ApolloClient, gql} = ApolloAmd;
    const client = new ApolloClient({url: '/graphql'});

    /** Object use in feedback for graphGL wishlist **/
    const defaultObject = `{ items { product { sku, name } } } }`;

    return {
        get(filters, object) {
            let objectReturn = (object) ? object : defaultObject;
            const query = (objectReturn) ? '{' + filters + ',' + objectReturn + ' }' : '{' + filters + ' }';
            return client.query({
              query: gql(query),
              fetchPolicy: 'no-cache',
            }).then(
                (data) => { return data; }
            );
        },
    };
});
```
Le fichier `query.js` va lui √™tre utilis√© comme un contr√¥leur : il va r√©cup√©rer un objet, le formater puis de le
renvoyer au template.
```js
//app/code/Gaia/Configurator/view/frontend/web/js/Query.js

define(['jquery', 'graphql'],
  function($, graphQL) {
  return {
    getCMS(id) {
      const filters = 'cmsBlocks(identifiers: "' + id + '")';
      const object = `{items {content}}`;
      return graphQL.get(filters, object).then(
        (result) => { return result; }
      );
    },
  }
});
```
Dans le template, nous souhaitions afficher un contenu pr√©c√©demment d√©fini dans un block statique en back-office. Pour
remplacer la valeur initialement vide, nous sommes pass√©s par une promesse via la fonction `Query.getCMS`. Une fois la
nouvelle valeur r√©cup√©r√©e, il a suffi de l'injecter avec le fonctionnement classique de VueJS.
```html
<!-- app/code/Gaia/Configurator/view/frontend/web/template/App.vue -->

<template><div v-html="content"></div></template>

<script>
define(['jquery','Vue',Query], function($,Vue,Query) {
    return new Vue({
        template: template,
        components: {},
        data() {
            return {
                content: '';
            };
        },
        created() {
            Query.getCMS('monBlockCMS').then(
              (result) => {
                this.content = result.data.cmsBlocks.items[0].content;
              }
            ).catch((err) => {
                throw err;
            });
        },
    });
});
</script>
```

Attention, il ne faut pas oublier de mettre √† jour le fichier `requirejs-config.js`.
```js
// app/code/Gaia/Configurator/view/frontend/requirejs-config.js

const config = {
  map: {
    '*': {
      // ...
      'graphql': 'Gaia_Configurator/js/graphql',
      'Query': 'Gaia_Configurator/js/Query',
    },
  },
};
```

### 3. Composants

<figure>
  <img src="/assets/image/magento/wirframe.png" alt="Wireframes" />
  <figcaption>Wireframe: Personalisation d'un √©l√©ment d'une tenue</figcaption>
</figure>

Le configurateur fonctionne avec plusieurs niveaux de profondeur, mais il utilise toujours le m√™me type de structure.
Pour faciliter le d√©veloppement, limiter la duplication, et anticiper l'ajout d'√©l√©ments, formater les donn√©es GraphQL
pour pouvoir naviguer dans un objet √©tait la meilleure option. Une fois ce "meta-objet" structur√©, il √©tait
incontournable de d√©couper notre fichier `App.vue` en plusieurs composants. Jusqu'ici, tout semblait s'√©claircir,
puisque nous entrions dans le fonctionnement VueJS classique, mais nous avions oubli√© le fameux RequireJS de Magento.

Par contre, la m√©thode utilis√©e pour g√©rer le fichier `App.vue` n'a pas pu √™tre r√©utilis√©e pour cr√©er les autres
composants. L'avantage de VueJs est qu'il peut √™tre fonctionnel via du JavaScript. Nos composants ont donc √©t√© √©crits
dans des fichiers en `.js`. Attention, il est indispensable de d√©clarer tous les composants dans le fichier
`require-config.js` puis de les utiliser de fa√ßon classique avec VueJS.

```js
define(['jquery', 'Vue'],
    function($, Vue) {
        const template = `<div v-html="content"></div>`;
        return Vue.component('Help', {
            template: template,
            data() {
                return {
                    content: null,
                };
            },
            created() {
                Query.getCMS('monBlockCMS').then(
                    (result) => {
                        this.content = result.data.cmsBlocks.items[0].content;
                    }
                ).catch((err) => {
                    throw err;
                });
            },
        });
    }
);
```

### 4. Traductions
Pour les traductions, notre premi√®re id√©e a √©t√© d'utiliser le syst√®me standard de Magento. Toutefois, il ne fonctionne
pas avec des donn√©es dynamiques. Nous nous sommes rabattus sur le fonctionnement standard de VueJS en ajoutant
`vue-i18n` √† l'application.

Pour ce faire, il faut charger `vue-i18n` et les fichiers de traductions via le fichier `require-config.js`.
```js
// app/code/Gaia/Configurator/view/frontend/requirejs-config.js

const config = {
  map: {
    '*': {
      // ...
      'VueI18n': 'https://unpkg.com/vue-i18n@8',
      'FRi18n': 'Gaia_Configurator/i18n/fr',
    },
  },
};
```

Ensuite, il restait √† ajouter `vue-i18n` dans l'application.
```js
'use strict';

define(['Vue', 'VueI18n', 'jquery'],
    function(Vue, VueI18n, $) {
        const src = './Gaia_Configurator/template/App';

        Vue.use(VueI18n);

        return function () {
            require(['requireVue!' + src ], function(file) {
                file.$mount('#configurator');
            });
        }
    }
);
```

Puis, dans chaque composant, il nous fallait instancier le syst√®me de traductions. La fonction `i18n()` a alors √©t√©
cr√©√©e dans notre fichier `utils.js` pour la r√©utiliser facilement sans avoir √† la dupliquer.

```js
// app/code/Gaia/Configurator/view/frontend/web/js/utils.js

define(['jquery', 'VueI18n', 'FRi18n'], function($, VueI18n, FRi18n) {
    return {
        i18n() {
            return new VueI18n({
                'locale': $('html').attr('lang'),
                'fallbackLocale': 'fr',
                'messages': {
                  'fr': FRi18n,
                },
            });
        }
    }
})
```
Une fois `vue-i18n` install√©, il a suffi de suivre son fonctionnement classique. Premi√®rement, il faut l'ajouter
dans le composant avec `i18n: utils.i18n()` puis d'appeler la traduction avec `$t('maCl√©')`.

Pour ce qui est du fichier avec les cl√©s de traductions, voici le format retenu.
```js
define(function() {
  return {
    'maCl√©': 'maValeur',
  }
});
```

### 5. Et apr√®s ?
Une fois toutes ces m√©caniques mises en place, le d√©veloppement des fonctionnalit√©s a continu√© pas √† pas. Les nouvelles
demandes ont finalement √©t√© simples √† traiter puisque nous √©tions dans un environnement VueJS (presque) classique. En
cas de probl√®me, nous pouvions utiliser la [documentation officielle](https://vuejs.org/v2/guide/). Nous avons √©galement
pu sans difficult√© enrichir cet environnement avec un syst√®me interne de routeur puisque nous l'avions d√©j√† fait avec
`vue-i18n`.

## En r√©sum√©, et si c'√©tait √† refaire ?
Cette nouvelle option nous offre de tr√®s nombreuses possibilit√©s. L'avantage est que la phase d'exp√©rimentation est
termin√©e, il est maintenant possible pour nous de monter une brique hybride en quelques heures. C'est d'ailleurs ce que
nous avons fait sur un autre projet avec une brique plus petite. Cette deuxi√®me exp√©rience a confirm√© que cette
option est un compromis id√©al si le besoin exp√©rientiel est limit√© √† une partie du site.
